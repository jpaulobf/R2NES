Changelog - R2NES
===================

Version 0.5.6.1 – Refactory and Cleaning

- No functionality has been added/changed.
- Code has been improved

------------------------

Version 0.5.6 – UX/QoL: Centered Overlays, Close ROM, Safer No‑ROM Mode (2025-09-07)
------------------------

Added
- File → Close ROM menu action to unload the current cartridge, stop audio, and return to the black‑screen emulator state. Performs PRG RAM autosave and updates the window title to indicate no ROM.
- Auto‑pause when opening the Load ROM dialog if a game is running; the prior pause state is restored if the dialog is canceled. After a successful load, the emulator resumes as expected.
- Menu state reflection: Reset and Close ROM menu items are disabled when no ROM is loaded.

Changed
- All non‑HUD message overlays (RESET notice, save/load state feedback, fast‑forward indicator, and PAUSED) are now centered on the screen, and their text is centered within each message box. The HUD remains unchanged.
- Fast‑forward overlay is hidden when no ROM is loaded.

Fixed
- Prevented accidental actions when no ROM is loaded: hotkeys for save/load state, pause, fast‑forward, and reset are ignored in no‑ROM mode.

Notes
- Complements the black‑screen no‑ROM startup behavior introduced in 0.3.9.8.

Version 0.5.5 – Optional Gamepad (LWJGL/GLFW) + Runtime Lib Packaging (2025-09-07)
------------------------

Added
- Optional gamepad support via LWJGL 3 (GLFW). Enable with emulator.ini: `gamepad=true`.
  - Maps standard gamepad to NES: A→A, B→B, Start→START, Back→SELECT, D-Pad (fallback to left stick axes when needed).
  - Runs on a small hidden GLFW window; polls in a background daemon thread.
  - Starts after controllers are attached and stops on app exit.

Changed
- Packaging: JAR manifest now includes Class-Path with prefix `lib/`, and runtime dependencies are copied to `target/lib` (maven-dependency-plugin). Running the JAR picks up LWJGL libs automatically.
- README updated with Gamepad section (EN/PT) and run instructions note about `target/lib`.

Known Limitations
- Windows natives packaged only. For Linux/macOS, add the appropriate LWJGL natives or extend the POM.
- Single gamepad (first detected). No remapping UI, no rumble yet.

Version 0.5 – APU Audio Core (Pulse/Triangle/Noise), Mixer & JavaSound Output (2025-09-07)
------------------------

Added
- APU audio core: Pulse1/Pulse2 (duty sequencer, sweep), Triangle (linear counter with 32-step table), and Noise (15-bit LFSR with short/long modes).
- Non-linear mixing (NES-style): pulse combiner + TND (Triangle + Noise; DMC not yet included).
- Fixed-rate sample generation with internal ring buffer; exposed APIs to read pending samples.
- JavaSound playback: background AudioPlayer drains APU samples at 44.1 kHz and outputs PCM16 mono; auto-start on ROM load and restart on ROM reload.
- Tests: sweep timing (period=1 immediate effect within one frame), pulse mute rule (timer <= 8), triangle gating, and noise shift/output basics.

Changed
- Sweep register write now reloads the divider immediately to allow the first sweep interval when period=1 (affects Pulse1/Pulse2 sweep behavior).
- README updated with Audio section; documented auto-start behavior and limitations.
- Project version bumped to 0.5 (pom.xml).

Known Limitations / Notes
- DMC channel is not implemented; TND mix currently uses Triangle + Noise only.
- Frame counter/IRQ nuances are simplified; audible glitches may occur under load or timing edge cases.
- Sample rate is fixed at 44.1 kHz for now; latency and buffer size are not yet configurable.
- APU state is not yet included in save-states (planned for a future snapshot format revision).

Version 0.4.6 – Zipped ROM Support (.zip) (2025-09-06)
------------------------

Added
- ROM loading from .zip archives containing exactly one .nes entry. Existing stream validation is reused; descriptive errors are thrown when no .nes is found or when multiple .nes files exist in the archive.

Changed
- Headless directory scan now considers both .nes and .zip; when both exist for the same base name, .nes is preferred.
- GUI file chooser filter expanded to accept both NES ROM and ZIP files (*.nes; *.zip).

Notes
- Behavior for raw .nes files is unchanged. CLI/INI precedence and runtime parity mechanisms remain the same.

Version 0.4.5 – INI Merge Extraction & Runtime Parity (2025-09-06)
------------------------

Changed
- Bumped project version to 0.4.5 (pom.xml).
- Extracted INI merge logic out of Main into `AppOptions.mergeFromIni(...)` for clearer separation of concerns.
- Further reduced `Main` complexity by delegating configuration merging and keeping only orchestration logic.

Fixed
- Ensured runtime option parity when loading ROMs from the GUI menu matches INI/CLI startup. Centralized via `RuntimeSettings` + `EmulatorConfigurator` to apply all flags consistently on ROM swaps.

Notes
- Behavior and precedence remain: CLI > INI > defaults. Externalization of emulator.ini remains planned as a low‑risk follow‑up.

Version 0.4.4 – CLI Refactor & Docs (2025-09-05)
------------------------

Changed
- Upgraded toolchain target to Java 21 in build (pom.xml) and docs.
- Extracted CLI parsing from Main into dedicated classes (`CLIOptionsParser`, `AppOptions`).
- Centralized configuration helpers (`ConfigUtils`) and key tokenization (`KeyTokens`).
- Cleaned up `Main` responsibilities and improved internal docs/Javadoc for flags.

Notes
- Behavior preserved; INI vs CLI precedence remains: CLI > INI > defaults.
- Further extractions (INI merge and GUI/headless bootstrap) planned for a future minor.

Version 0.4.1 – Instrumentation & Timing Refinements (2025-09-05)
------------------------

Added
- Spin watchdog (CLI/INI: `spin-watch=`) capturing snapshots when a PC repeats N cycles.
- Hex opcode dump for first spin occurrence (`spin-dump-bytes=`) capped and bound to watchdog.
- MMC1 bank/control write logging limit (`log-mmc1=`) for mapper state visibility.
- NMI trace option (`trace-nmi=true`) logging each vblank edge (diagnostic only).
- PPUSTATUS ($2002) read instrumentation: per-frame counter (SRS) + last 8 values ring (RS8) surfaced in snapshots.
- Sprite 0 hit first-set timestamp triplet (frame/scanline/cycle) in snapshots.
- Manual diagnostic snapshot hotkey (`log-warn-key=`) outputs a rich [SNAP] line at WARN level.
- Inline disassembler segment (DISS[...]) in spin / manual snapshots (auto-disabled when instrumentation off).
- Debug override `force-sprite0-hit` to quickly test game loops polling BIT $2002 without full accuracy implemented.
- Central instrumentation gating flag to strip overhead when all debug features disabled.

Changed
- Disassembler now falls back to a minimal fast path when instrumentation is disabled (avoids per-instruction decode cost).
- Spin watchdog histograms separated (general + IO subset) for clearer hot polling differentiation.
- Snapshot / spin lines enriched with mapper (MMC1) bank state, NMI deltas and sprite0 hit telemetry.

Fixed
- Coarse X increment corrected to advance only on tile boundaries (every 8 pixels) instead of every pixel; improves background alignment affecting sprite0 collision timing.
- Ensured vblank clear + NMI latch reset occurs exactly once on frame wrap (prevents duplicate late-edge NMIs under some edge cases).

Performance
- All heavy diagnostic code paths guarded; when no instrumentation flags are set, added logic is effectively cold (minimal string building or allocation).

Notes
- `force-sprite0-hit` is a temporary diagnostic and should remain disabled for normal gameplay.
- Future work: refine natural sprite 0 hit timing (background fetch & sprite evaluation cycle accuracy) so override is unnecessary.

Version 0.4 – Scanlines, Pause & Unified Exit (2025-09-05)
------------------------

Added
- Scanlines overlay via INI: `scanlines=true`, opacity with `scanlines-alpha=0.0..1.0` (draws every other horizontal line using alpha; purely cosmetic, no framebuffer mutation).
- Pause system: `pause-emulation=` accepts one or more tokens separated by `/` (e.g. `P/p/pause`). Displays on-screen "PAUSED" and halts frame advancement with minimal CPU (sleep-based yield).
- Pause/Break key support (token `pause`).
- Automatic pause activation when exit confirmation dialog appears (ESC, Alt+F4, window close). Previous pause state restored if user cancels dialog.

Changed
- Unified ESC and window close confirmation logic; both share the same dialog + autosave path.
- Key mapping extended to emit token for VK_PAUSE.
- Render loop inserts short sleep while paused instead of ticking frames (reduces CPU usage).
- README updated (EN/PT) documenting scanlines & pause features.

Fixed
- Canceling exit (dialog No) previously forced unpause; now restores prior pause state.

Limitations
- Pause flag and turbo cadence phase not serialized in save-state v2.
- No single-frame step while paused (planned hotkey).
- Scanlines density fixed at 5%; presets (25%/75%) and runtime toggle to be added.

Planned / Next
- MMC3 IRQ counter implementation; APU audio core.
- Save-state v3 to include pause flag, turbo phase, mapper IRQ counters.
- Frame-step hotkey; scanline density presets; HUD turbo indicator; scanlines toggle key.
- Zipped/compressed ROM loading support.

Version 0.3.9.8 – Turbo Buttons & No-ROM Mode (2025-09-04)
------------------------

Added
- Turbo (autofire) support for A/B via optional INI mappings: `dp-01-a-turbo`, `dp-01-b-turbo` (and pad2 variants). If unmapped, feature is inert.
- Default turbo cadence 15 Hz (ON 2 frames / OFF 2 frames @60fps). Fast mode 30 Hz (ON 1 / OFF 1) enabled with `turbo-fast=true`.
- Precedence: turbo key overrides normal A/B key if both held (deterministic latch state, avoids mixed bits).
- Internal frame hook (`onFrameAdvance`) drives cadence without per-read branching overhead.
- GUI startup without ROM now creates a black-screen PPU instance (HUD / ESC functional) instead of auto-loading a fallback cartridge.

Removed
- Deprecated implicit fallback ROM load behavior.

Changed
- Controller config parser extended to accept `-turbo` suffix and global `turbo-fast` boolean option.
- README (EN/PT) updated to document turbo + no-ROM mode.

Limitations
- Turbo frame phase not serialized in save-state v2 (pattern restarts after load; negligible impact).
- No HUD indicator yet for turbo activity (planned enhancement).

Notes
- Turbo logic isolated at frame boundary; maintains existing $4016 strobe/latch semantics and keeps overhead minimal during rapid serial reads.
- Future save-state version may include turbo phase for perfect determinism across loads.

Version 0.3.9.2 – Left Column Modes & Scroll Fixes (2025-09-04)
------------------------

Added
- Configurable left column handling: INI / CLI `left-column-mode=` with values:
  * `hardware` (default): obey PPUMASK bit 1 (standard NES behavior: left 8 px blank only if mask bit cleared).
  * `always`: always blank first 8 background pixels (legacy masking / hides edge artifacts consistently).
  * `crop`: post-frame overwrite of first 8 columns (keeps internal buffers intact for debugging; applied after render loop).
- CLI: `--left-column-mode=hardware|always|crop`.

Changed
- Default initial PPUMASK reset value from 0x0A to 0x08 (removes forced leftmost background enable bit in reset scenario).
- Central post-frame hook (`applyPostFrameCroppingIfNeeded`) invoked automatically after each frame.
- Fine X scroll tap optimization (cached value avoids redundant masking operations per pixel).

Fixed
- Save/load core state lost vertical scroll bit 14; now preserves full 15-bit loopy address (0x7FFF mask) preventing incorrect vertical copy at pre-render cycles.

Tests
- Updated / added tests for: vertical copy + fine X tap, left column hardware vs always modes, crop mode integration (indirect via framebuffer state after frame).

Notes
- `crop` differs from `always`: it allows raw hardware edge for internal logic then blanks visually, useful for pixel pipeline debugging without user-visible seam.
- Potential future hotkey to cycle modes at runtime (not yet implemented).

Version 0.3.9.1 – UX & Pacing Diagnostics (2025-09-04)
------------------------

Added
- ESC hotkey (not configurable) opens confirmation dialog: "You really want exit? Yes/No"; on Yes performs autosave then exits.
- Automatic mouse cursor hide in borderless fullscreen; restored when returning to windowed mode.
- Frame timing instrumentation (legacy + high-res pacer): last frame duration, exponential moving average, jitter (absolute deviation EMA), worst frame per FPS window.

Changed
- High-res pacer realignment threshold reduced (realigns when >1 frame behind instead of >3) to curb burst catch-up and reduce perceived micro-stutter.
- Version bumped to 0.3.9.1.

Notes
- Instrumentation getters available; HUD integration for frame ms/jitter pending (future minor update).
- Potential future INI key to toggle advanced metrics or set frame long threshold for logging.

Version 0.3.9 – Fast-Forward & Throttle, PPU Refactor (2025-09-04)
------------------------

Added
- Fast-forward hotkey (hold) configurable via INI `fast-foward=` (grafia mantida) e CLI `--fast-forward-key=`.
- Optional maximum FPS throttle during fast-forward: INI `fast-foward-max-fps=` e CLI `--fast-forward-max-fps=` (0 ou ausente = ilimitado).
- On-screen HUD overlay indicator now shows `FFWD xN.N` speed multiplier (relative to 60 FPS baseline).
- Borderless fullscreen config key (`borderless-fullscreen=`) with CLI overrides.
- Timing mode selection exposed via `--timing-mode=` complementing legacy `--timing-simple`.

Changed
- Background fetch phase-0 logic refactored into helper (`tileReloadAndAdvanceX`) for readability (no behavioral change intended).
- Frame pacing loops bypass sleeps entirely during fast-forward unless throttle active (reduces latency while holding key).
- Version bumped to 0.3.9.

Fixed
- TAB key not triggering fast-forward due to focus traversal consumption (disabled focus traversal keys on window & canvas).

Notes
- Throttle is coarse (frame count window); future refinement may use moving average or adaptive sleep for smoother caps.
- INI retains original misspelling `fast-foward` for backward compatibility; a future release may accept both spellings.

Version 0.3.8.1 – Interleaved Timing Mode (2025-09-04)
------------------------

Added
- New configurable CPU/PPU timing selection via `--timing-mode=` (simple|interleaved) and `timing-mode=` in `emulator.ini`.
- Interleaved mode introduces micro-slice execution pattern (PPU, CPU, PPU, PPU) instead of batching all PPU cycles after each CPU instruction.
- Reduces latency for: NMI visibility to CPU, sprite zero hit detection, sprite evaluation edge cases.
- INI documentation block with guidance + legacy flag `--timing-simple` still supported (maps to SIMPLE).

Changed
- Project version bumped to 0.3.8.1.

Notes
- Default remains SIMPLE until further performance profiling; INTERLEAVED can be enabled per ROM/test scenario.
- No functional change to save state format (still version 2).

Planned
- Future refinement may allow runtime toggle hotkey and finer PPU interleave phases (eventually cycle-exact pairing with CPU memory accesses).

Version 0.3.8 – Save State System (Version 2 Format) (2025-09-04)

Added
- Configurable save/load state system.
- INI keys: `save-state-path`, `save-state`, `load-state`.
- Default hotkeys F5 (save) / F7 (load) with on-screen overlay feedback.
- Atomic snapshot write (temp + move) and backward compatibility (v1 -> normalized frame start).
- PPU internal latch persistence (addrLatchHigh, OAMADDR, PPUDATA read buffer) for stability.

Changed
- Bumped project version to 0.3.8.
- README updated (EN/PT) with Save State section.

Known Limitations
- APU state not yet included.
- Mappers 2/3/4/5 partial: only base runtime, snapshot serialization pending.
- Mid-scanline loads resume at pre-render if exact pipeline not yet serialized (minor visual discontinuity acceptable).

Planned (See TODO)
- Version 3 snapshot: full shift registers / latches, prepared sprite set, mapper IRQ counters.
- Integrity checksum + optional compression.


Version 0.3 (2025-09-03)
------------------------
Summary: Core consolidation (CPU + PPU + Bus), multi-mapper support (including MMC1, partial MMC3, partial MMC5), battery-backed SRAM (PRG RAM) persistence with periodic autosave and window-close flush, richer debugging/logging, configurable INI-driven runtime, and an extensive regression test base.

Highlights
- 6502 CPU
  - Full implementation of official opcodes, addressing modes, and flags.
  - Reset, basic NMI hook (from PPU) and per-instruction / per-cycle stepping.
  - Trace hooks (--trace-cpu, PC breakpoints, memory read watch).
- Memory / Bus
  - Central bus unifying CPU, PPU, Mapper, and internal RAM.
  - Configurable read watch (debug helper).
  - PPU register mapping ($2000-$2007) plus relevant DMA/OAM ranges.
- PPU (2C02) – background pipeline
  - Background rendering with sequential nametable / attribute / pattern fetch (simulated scanlines & cycles).
  - Fine X scroll and internal VRAM address logic reproduced.
  - Nametable mirroring (horizontal / vertical) via mapper configuration.
  - Selective logging: attribute writes, nametable writes, fetch pipeline, palette writes.
  - Standalone test-pattern modes (h / v / checker) without ROM/CPU.
  - Forced PPUMASK bits (e.g. FORCE-BG) for diagnostics.
  - Sprite pipeline: preliminary evaluation, priority, sprite zero hit, overflow (accuracy still evolving).
  - Optional simplified timing mode for quicker debug loops.
- Sprites
  - Secondary OAM evaluation, overflow testing, background priority handling.
  - Experimental unlimited-sprites mode (disables hardware 8-per-scanline limit).
  - Alternate Y semantics mode (hardware vs test) for test compatibility.
- Persistence / SRAM (PRG RAM)
  - Battery-backed PRG RAM supported for mappers exposing it (MMC1, MMC3).
  - Internal save logic reused by autosave.
  - Periodic autosave (configurable frame interval) and forced save on window close.
  - Atomic write (.tmp + move) minimizing corruption risk.
  - Auto-load if .sav exists (respecting configured directory).
  - Configurable save-path (separate from ROM folder) in emulator.ini.
- Implemented Mappers
  - Mapper 0 (NROM) – baseline.
  - Mapper 1 (MMC1) – PRG/CHR banking + battery PRG RAM.
  - Mapper 2 (UxROM) – simple PRG banking.
  - Mapper 3 (CNROM) – CHR banking.
  - Mapper 4 (MMC3) – partial (main bank switching; IRQ not yet implemented).
  - Mapper 5 (MMC5) – minimal / partial (foundation for future work).
  - Mapper interface extended with getPrgRam() and onPrgRamLoaded() for persistence.
- Autosave / Directories
  - Automatic .sav naming (ROM base name) when no save-path override.
  - Clean override constructor with explicit saveDir prevents unintended ROM-folder saves.
- Configuration (emulator.ini)
  - Keys: reset, toggle-fullscreen, toggle-hud, proportion cycle.
  - Logging: level, categories, timestamps, quiet/verbose.
  - PPU options: tile-matrix, force-bg, nt-baseline, pipe-log, log-attr, log-nt, log-palette.
  - Special modes: test-pattern, until-vblank, timing-simple, unlimited-sprites, sprite-y mode, pacer.
  - save-path key directs persistence output.
  - Precedence: CLI > INI > defaults.
- GUI
  - Swing window with optional BufferStrategy triple buffering (default ON).
  - Borderless fullscreen with runtime toggle.
  - Optional HUD (FPS, scanline, cycle, VRAM, Mask/Status, fineX, controller state).
  - Proportion modes (normal / proportional-height / stretch) with hotkey cycling.
  - Standalone test-pattern render loop.
- Loop / Performance
  - High-resolution (HR) pacer and legacy pacing mode.
  - Frame stepping (stepFrame) synchronized with internal PPU frame counter.
- Debug / Dump Tools
  - Background dump to PPM (background.ppm).
  - Tile dumps: single or lists (--dump-pattern / --dump-patterns).
  - ASCII tile first-pixel matrix, histograms, per-column stats.
  - PPU pipeline fetch log (bounded) for introspection.
  - Breakpoints: PC and address read with hit counts.
- Tests
  - Broad suite covering CPU, PPU (scroll, background fetch, mirroring, timing, OAM, sprite zero hit, priority, overflow), mappers, and integration paths.
  - Ensures minimal regression after persistence & autosave additions.
- Structure / Code
  - Extensive Javadoc on core interfaces and PPU internals.
  - Detailed comments for rendering pipeline stages and design decisions.
  - Clear separation between stack construction (CPU/PPU/Mapper/Bus) and façade (NesEmulator).

Planned / Not in 0.3
- MMC3 IRQ implementation.
- Full APU (audio).
- Full save states (snapshot of CPU/PPU/Mapper state beyond SRAM).
- Higher timing accuracy (cycle-exact refinements).
- Enhanced sprite emulation accuracy (overflow & fine timing edge cases).

Historical Summary
- 0.1: Initial core CPU + Memory + Mapper0 + rudimentary PPU + basic dumps.
- 0.2: PPU expansion (fine scroll, pipeline, logs), more mappers (2,3,4 partial,5 partial), improved GUI, debug modes.
- 0.3: PRG RAM persistence (MMC1/MMC3), safe autosave, configurable save-path, Mapper1/4 RAM exposure, logging & HUD refinements.

End of changelog 0.3.
